<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue响应式原理</title>
      <link href="2021/04/09/vue-xiang-ying-shi-yuan-li/"/>
      <url>2021/04/09/vue-xiang-ying-shi-yuan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>单步调试F11 ,直接到下一步F10，F8跳到下一个断点的位置</p></blockquote><h1 id="数据响应式原理"><a href="#数据响应式原理" class="headerlink" title="数据响应式原理"></a>数据响应式原理</h1><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><blockquote><p>不兼容ie8，且不可shim降解<br>针对对象的属性做数据劫持，多个属性，需要循环</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    msg<span class="token punctuation">:</span> <span class="token string">'hello'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span>msg    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      data<span class="token punctuation">.</span>msg <span class="token operator">=</span> newVal      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>msg    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>  vm<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"hello world"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>msg<span class="token punctuation">)</span></code></pre><h2 id="new-Proxy"><a href="#new-Proxy" class="headerlink" title="new Proxy"></a>new Proxy</h2><blockquote><p>针对对象做代理，性能比之前的高</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    msg<span class="token punctuation">:</span> <span class="token string">'hello'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> target<span class="token punctuation">[</span>el<span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> el<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      target<span class="token punctuation">[</span>el<span class="token punctuation">]</span> <span class="token operator">=</span> newVal      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>msg    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>  vm<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'hello world!'</span></code></pre><h1 id="发布订阅、观察者模式"><a href="#发布订阅、观察者模式" class="headerlink" title="发布订阅、观察者模式"></a>发布订阅、观察者模式</h1><h2 id="发布（emit）订阅-on-事件中心-new-ddd"><a href="#发布（emit）订阅-on-事件中心-new-ddd" class="headerlink" title="发布（emit）订阅(on)事件中心(new ddd)"></a>发布（emit）订阅(on)事件中心(new ddd)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 订阅时，如何之前已经有了click，那么就直接在后面数组中加上事件队列，如何时新的事件就要建立新的数组</span>    <span class="token function">$on</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果存在这个事件就等于之前的那个，如果不存在就是一个空数组</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//触发事件，如果this.subs中有这个事件，就依次调用，如果没有就什么也不做</span>    <span class="token function">$emit</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>handler <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 测试</span>  <span class="token keyword">let</span> em <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  em<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click1'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  em<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click2'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  em<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span></code></pre><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote><p>和发布订阅不同，观察者模式只有发布者和订阅者，没有事件中心，并且发布者需要知道订阅者的存在<br>发布订阅模式隔离了发布者和订阅者，更加灵活，而观察者模式发布订阅者相互依赖   </p></blockquote><p>1、这里订阅者又叫观察者</p><ul><li>所有的观察者都有一个update方法，</li><li>在vue的响应机制中数据的变化就会调用update方法，update内部就会更新视图</li><li>这个update方法是提供给发布者调用的   </li></ul><p> 2、发布者又叫目标</p><ul><li>发布者内部记录所有的订阅者，事件发生时，是由发布者通知所有的订阅者，     发布者内部属性：</li><li>subs数组：存储所有的订阅者，元素是所有依赖该事件的观察者</li><li>addsub(): 增加观察者的方法</li><li>notify():当事件发生，调用所有观察者的update方法 <pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 发布者-目标</span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录所有的订阅者</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">addsub</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将观察者添加到数组中，需要判断是否存在而且要有update方法</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">&amp;&amp;</span> sub<span class="token punctuation">.</span>update<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发布通知</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历所有的订阅者，并调用他们的update方法</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 订阅者-观察者</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111111111'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dep<span class="token punctuation">.</span><span class="token function">addsub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="Vue响应式原理"><a href="#Vue响应式原理" class="headerlink" title="Vue响应式原理"></a>Vue响应式原理</h1><img src="https://img-blog.csdnimg.cn/20210402160221197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxMzgzOTc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过代码模拟，以上过程<br>index.html<br>```html<!DOCTYPE html><html lang="en"></li></ul><head>  <meta charset="UTF-8">  <meta http-equiv="X-UA-Compatible" content="IE=edge">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>Document</title></head><body>  <div id="app">    <div>      <h1></h1>    </div>    <h1></h1>    <h1 title="more">v-text</h1>    <p v-text="msg"></p>    <h1>v-model</h1>    <input type="text" v-model='msg'>    <input type="text" v-model='count'>    <p v-sd="msg"></p>  </div></body><script src="./src/Dep.js"></script><script src="./src/Watcher.js"></script><script src="./src/Compiler.js"></script><script src="./src/Observer.js"></script><script src="./src/Vue.js"></script><script>  let vm = new Vue({    el: '#app',    data: {      msg: 'hello world',      count: 1,      person: {        name: 'zhangsan'      }    },  })  console.log(vm.msg)  // vm.msg = {  //   meg: 'sdsds'  // }</script></html>```## Vue```javascriptclass Vue{  constructor(options){    // 1.通过属性保存选项中的数据    this.$options=options || {} //如果调用的时候传入了options就赋值给它，没有用空对象    this.$data=options.data || {}    // options要传入的对象可能是字符串的形式，如果是字符串就是一个选择器，也可能是一个Dom对象，    this.$el = typeof options.el ==='string'?document.querySelector(options.el):options.el    // 2.把data中的成员转换成getter和setter注入到Vue实例中    this._proxyData(this.$data)    // 3.调用Observer对象，监听数据的变化    new Observer(this.$data)    // 4.调用compiler对象，解析指令和差值表达式    new Compiler(this)  }  // 代理数据，让vue代理data中的属性  _proxyData(data){     // 遍历data中所有的属性    Object.keys(data).forEach(el=>{      //然后调用defineProperty将属性注入到实例中      // 此处的this指向的就是Vue实例      Object.defineProperty(this,el,{        configurable:true,        enumerable:true,        get(){          // get方法中访问数据，而数据是在data中存储的，Vue实例本身是 不存储 数据的          // 直接返回data中对应的属性的值          return data[el]        },        set(value){          if(value===data[el]){            return          }          data[el]=value        }      })    })  }}```## Observer```javascriptclass Observer{  constructor(data){    // 希望通过这个类创建完对象之后，立即把data中的所有属性转换成getter setter    this.walk(data)  }  walk(data){    //1.需要判断data是否是空值，是否是对象，保证代码健壮性    if(!data || typeof data !== 'object'){      return    }    //2.遍历data，调用defineReactive    Object.keys(data).forEach(key=>{      this.defineReactive(data,key,data[key])    })  }  // obj ：data对象，key属性，value属性对应的值，  defineReactive(obj,key,value){    let that = this    // 负责收集依赖,并发送通知    let dep = new Dep( )    // 如果value是对象，就要将对象中的属性转换成响应式的    this.walk(value)    Object.defineProperty(obj,key,{      configurable:true,      enumerable:true,      get(){         //收集依赖，首先要判断Dep是否有target属性，这个属性在watcher对象中添加         Dep.target&&dep.addSubs(Dep.target)<pre><code>    // 如果用obj[key],会出现堆栈溢出错误，因为每次访问obj[key]都会调用get方法，从而出现死递归    // 当defineReactive调用完成之后，val是一个参数局部变量，值应该被释放掉，但是在实例化后可以被打印，    // 这里的obj就是data对象，是vue的$data属性，$data引用了get方法，就是外部对get方法有引用，而get用到了value，此处发生了闭包，所有这个属性没有被释放掉    return value  &#125;,  set(newVal)&#123;    if(newVal===value)&#123;      return    &#125;    value=newVal    // 如果新赋值的value是对象，要将value中的属性转换成响应式的    // 这里的this指向data    console.log(this)    that.walk(value)    // 发送通知    dep.notify()  &#125;&#125;)</code></pre><p>  }<br>}</p><pre><code>## Compiler```javascriptclass Compiler&#123;  constructor(vm)&#123;  //传入vm就是vue的实例    this.vm=vm    this.el=vm.$el    // 当调用Compiler创建compiler对象时会立即开始编译模板    this.compile(this.el)  &#125;  // 编译模板， 处理文本节点和元素节点  compile(el)&#123;    // 遍历el中的所有的节点，childNodes是一个伪数组    let childNodes = el.childNodes    Array.from(childNodes).forEach(node=&gt;&#123;      // 处理文本节点      if(this.isTextNode(node))&#123;        this.compileText(node)      &#125;      //处理元素节点      if(this.isElementNode(node))&#123;        this.compileElement(node)      &#125;      // 判断node节点是否有子节点，如果有子节点，有子节点要递归调用compile      if(node.childNodes &amp;&amp; node.childNodes.length)&#123;        this.compile(node)      &#125;    &#125;)  &#125;  // 编译元素节点，处理指令  compileElement(node)&#123;    // 遍历dom的所有属性节点，判断是否是指令    // console.log(node.attributes)    Array.from(node.attributes).forEach(attr=&gt;&#123;      let attrName = attr.name      if(this.isDirective(attrName))&#123;        attrName=attrName.substr(2)        let key = attr.value        this.update(node,key,attrName)      &#125;    &#125;)  &#125;  update(node,key,attrName)&#123;    let updateFn = this[attrName+&#39;Updater&#39;]    // updateFn &amp;&amp; updateFn(node,this.vm[key],key)    //updateFn函数中的this指向是 undefine,而不是update需要call方法改变this指向update,    // 而update的调用者是compiler，这样间接的，updateFn中的thist指向也是compiler    updateFn&amp;&amp;updateFn.call(this,node,this.vm[key],key)  &#125;  // 处理v-text指令  textUpdater(node,value,key)&#123;    // console.log(this)  //之前是undefined，通过call改变this指向，现在是compiler    node.textContent = value    new Watcher(this.vm,key,(newVal)=&gt;&#123;      node.textContent = newVal    &#125;)  &#125;  // v-model  modelUpdater(node,value,key)&#123;    node.value = value    new Watcher(this.vm,key,(newVal)=&gt;&#123;      node.value = newVal    &#125;)    //双向绑定    node.addEventListener(&#39;input&#39;,()=&gt;&#123;      this.vm[key] = node.value    &#125;)  &#125;  //处理文本节点，就是处理差值表达式  compileText(node)&#123;    // dir是将后面的变量以对象的形式打印出来    // console.dir(node)    // 判断文本节点是否是差值表达式 &#123;&#123;  &#125;&#125;    // .+?任意多字符以贪婪模式今早结束匹配，（）分组提取变量    let reg=/\&#123;\&#123;(.+?)\&#125;\&#125;/    let value =  node.textContent    if(reg.test(value))&#123;      let key = RegExp.$1.trim()  //获取第一个分组内容      //将差值表达式替换成属性对应的值 重新赋值给文本节点      // reg正则对象，this.vm就是实例化对象      node.textContent = value.replace(reg,this.vm[key])       //创建watcher对象，当数据改变更新视图      new Watcher(this.vm,key,(newVal)=&gt;&#123;        node.textContent = newVal      &#125;)    &#125;  &#125;  // 判断元素的属性名字，是否是指令 是否是v-开头  isDirective(attrName)&#123;    return attrName.startsWith(&#39;v-&#39;)  &#125;  // 判断传入的节点是否是文本节点, nodeType 1是元素节点，3是文本节点  isTextNode(node)&#123;    return node.nodeType===3  &#125;  // 判断这个节点是否是元素节点  isElementNode(node)&#123;    return node.nodeType===1  &#125;&#125;</code></pre><h2 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Watcher</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span>key<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm    <span class="token comment" spellcheck="true">// data中的属性名称</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token comment" spellcheck="true">// 回调函数负责更新视图</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb    <span class="token comment" spellcheck="true">//创建watcher对象时，要把当前的watcher对象添加到dep的subs数组中</span>    <span class="token comment" spellcheck="true">//把当前的watcher对象记录到Dep的target的静态属性中</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment" spellcheck="true">//触发get方法，在get方法中调用addSub ，访问vm某个属性时自动会调用get方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>oldVal <span class="token operator">=</span> vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//当把Dep.target添加之后需要置为空，防止重复添加</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 负责当数据发生变化时，更新视图</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newVal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oldVal <span class="token operator">===</span> newVal<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Dep"><a href="#Dep" class="headerlink" title="Dep"></a>Dep</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dep</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// subs数组存储所有的观察者</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 添加观察者</span>  <span class="token function">addSubs</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sub<span class="token operator">&amp;&amp;</span>sub<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 发送通知</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sub<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>base64与md5混合编码</title>
      <link href="2021/04/09/welcome/"/>
      <url>2021/04/09/welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h1><blockquote><p><a href="https://blog.csdn.net/weixin_42420703/article/details/81384901">https://blog.csdn.net/weixin_42420703/article/details/81384901</a><br><a href="http://blog.sina.com.cn/s/blog_6291e42d0101gq2f.html">http://blog.sina.com.cn/s/blog_6291e42d0101gq2f.html</a></p></blockquote><h2 id="英文dog进行base64编码过程"><a href="#英文dog进行base64编码过程" class="headerlink" title="英文dog进行base64编码过程"></a>英文dog进行base64编码过程</h2><p>  1、一个字节8位，d o g 通过转换为unicode再转化为二进制（str.charCodeAt(0).toString(2)）对照找到对应的8位二进制表示方法<br>  a 97    d 100  o  111   g  103<br>0110 0100<br>0110 1111<br>0110 0111<br>2、将24位每份6位进行分割<br>011001   000110    111101    100111<br>3、再将上面的分组改为标准的8位字节，每组前加上00<br>00011001    00000110    00111101    00100111<br>4、在将上面的二进制分别转换位10进制   (<code>0b$&#123;el&#125;</code>-0b0).toString(10)<br>25  6   61  39<br>5、base64 从0开始分别找到对应位置的字符<br>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=/<br>str.charAt(25) = Z<br>str.charAt(6) = G<br>str.charAt(61) = 9<br>str.charAt(39) = n<br>6、dog通过base64编码后是ZG9n<br>7、通过js自带方法btoa、atob处理<br>编码 btoa(‘dog’) = ‘ZG9n’<br>解码 atob(‘ZG9n’) = ‘dog’</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Base64 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _keyStr<span class="token punctuation">:</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span><span class="token punctuation">,</span>    encode<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> n<span class="token punctuation">,</span> r<span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">,</span> o<span class="token punctuation">,</span> u<span class="token punctuation">,</span> a<span class="token punctuation">;</span>        <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">_utf8_encode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 通过encode('dog')理解</span>      <span class="token comment" spellcheck="true">// 实现了一次自增，先计算后自增</span>            n <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// f :0</span>            r <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// f:1</span>            i <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// f: 2</span>      <span class="token comment" spellcheck="true">// console.log(n,r,i)  //100 111 103</span>            s <span class="token operator">=</span> n <span class="token operator">></span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 位运算右移2位，相当于除以2的2次方  s= 25</span>      <span class="token comment" spellcheck="true">// 100和3的与计算 两个位都为1时，结果才为1，100（110 0100）&amp; 3（00 0011）结果是0</span>      <span class="token comment" spellcheck="true">// 0左移4位乘以2的4次方，0</span>      <span class="token comment" spellcheck="true">// r 此时是111右移4位除16取整结果是 6</span>      <span class="token comment" spellcheck="true">// o = 0(0 0000) | 6(0 0110) = 0110   |或 两个位都为0时，结果才为0</span>            o <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> r <span class="token operator">></span><span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// r &amp; 15 = 15 ； 15&lt;&lt;2 =15*4=60; 103>>6 =103/64 = 1; 60(111100) | 1(0001) = 61(111101)</span>            u <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">|</span> i <span class="token operator">></span><span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 103 &amp; 63 = 39</span>            a <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                u <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token number">64</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                a <span class="token operator">=</span> <span class="token number">64</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    decode<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> n<span class="token punctuation">,</span> r<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token keyword">var</span> s<span class="token punctuation">,</span> o<span class="token punctuation">,</span> u<span class="token punctuation">,</span> a<span class="token punctuation">;</span>        <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^A-Za-z0-9+/=]/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            o <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            u <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> s <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">|</span> o <span class="token operator">></span><span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> <span class="token punctuation">(</span>o <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> u <span class="token operator">></span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token operator">|</span> a<span class="token punctuation">;</span>            t <span class="token operator">=</span> t <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                t <span class="token operator">=</span> t <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                t <span class="token operator">=</span> t <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">_utf8_decode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    _utf8_encode<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/rn/g</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> r <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//得到每一个字符的Unicode编码，如a 97</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                t <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> <span class="token number">127</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                t <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">></span><span class="token operator">></span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">63</span> <span class="token operator">|</span> <span class="token number">128</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                t <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">></span><span class="token operator">></span> <span class="token number">12</span> <span class="token operator">|</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">></span><span class="token operator">></span> <span class="token number">6</span> <span class="token operator">&amp;</span> <span class="token number">63</span> <span class="token operator">|</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">63</span> <span class="token operator">|</span> <span class="token number">128</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    _utf8_decode<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> r <span class="token operator">=</span> c1 <span class="token operator">=</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                t <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                n<span class="token operator">++</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> <span class="token number">191</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> <span class="token number">224</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                c2 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token operator">|</span> c2 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                c2 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c3 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c2 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token operator">|</span> c3 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>Base64 .encode先把要加密的字符串转换位utf-8的格式，然后对字符串进行遍历，每三个一组，每组每个字符用8位二进制表示，切割成每6位一份，所以会有4份对应函数中的4个变量 s  o  u  a<br>然后每组前添00，相当于位运算中&gt;&gt;2,  再转换位10进制，通过charAt计算结果</p></blockquote><hr><pre><code>-  从结果看，分成4组后，s  第一组右移2位就是结果中的第一个值，-  第二值o 要从前一个值中继承末尾的两位，通过判断和3（0011）与&amp;关系取得，然后再左移4位(左边4个0)变成6位的二进制，通过r &gt;&gt; 4左边添加4个0获取第二个字符的前四位是0的8位2进制，//  0110 1111 &gt;&gt; 4 = 111/16 = 0110  演变： 0000 0110，再通过 或| 计算保留二进制中的1-   第三个值 u同o的原理-  第四个值 a ，每三字符一个循环，每个字符8位二进制，然后再分成每6位一个字段，3*8 = 24 = 6*4，所以最后一个字符不用挪用其他的字符二进制表示  i &amp; 63；- 但是如果这个字符串只有2位，根据base64编码，最后一位需要补=，- i = e.charCodeAt(f++);此处的i就是NaN，就是64刚好是最后一位 =</code></pre><h2 id="base64与md5混合编码"><a href="#base64与md5混合编码" class="headerlink" title="base64与md5混合编码"></a>base64与md5混合编码</h2><p>1、通过npm包 blueimp-md5 将要编码的字符串转换为32位的16进制<br>2、将32位密文拆分位16个2位16进制数组，接下来把所有数组中的16进制数转换成8位2进制数，然后将16个8位2进制数组连接起来形成一个128位二进制数；（再将数组中每个元素的16进制转换为2进制   得到16个8位的二进制<br>）<br>3、第三步，从第二步生成的128位2进制数每次截取6位并补全为8位2进制数，按照8位2进制数所代表的1O进制索引查找Base64编码表，得到对应的密文。 </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> md5 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'blueimp-md5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.通过md5将test字符串转换为32位的16进制</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//098f6bcd4621d373cade4e832627b4f6  </span><span class="token comment" spellcheck="true">// 2.将32位转换为 16个 2位的16进制</span><span class="token keyword">let</span> list <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">let</span> newList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   newList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.再将数组中每个元素的16进制转换为2进制   得到16个8位的二进制</span><span class="token keyword">let</span> res <span class="token operator">=</span> newList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>el<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> item1<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token string">`0x$&amp;#123;el.charAt(0)&amp;#125;`</span></span><span class="token operator">-</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> item2<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token string">`0x$&amp;#123;el.charAt(1)&amp;#125;`</span></span><span class="token operator">-</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>item1<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    item1<span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>item1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">+</span>item1  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>item2<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    item2<span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>item2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">+</span>item2  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> item1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item2<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4.转化成base64编码：</span><span class="token comment" spellcheck="true">//a 将上面的二进制转换位每6位截取一次然后前面补00，通过对应的8位二进制转换位10进制通过ascci表找到对应的数</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">let</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> list3 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list3<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  list2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'00'</span><span class="token operator">+</span>list3<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// base64转换中，每三个字符为一组，不足的用= 补位</span><span class="token keyword">let</span> trail <span class="token operator">=</span> <span class="token string">'='</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>length<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> list4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>el<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token string">`0b$&amp;#123;el&amp;#125;`</span></span><span class="token operator">-</span><span class="token number">0b0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  list4<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> baseStr <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span> <span class="token keyword">let</span> list5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list4<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>el<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  list5<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>baseStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list5<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span>trail<span class="token punctuation">)</span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base64 md5 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
